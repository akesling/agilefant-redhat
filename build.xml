<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="webapp" name="AgilEFant">
	
    <property file="build-user.properties"/>
	<property file="build.properties"/>
	<property file="conf/database-mysql5.properties"/>
	
    <target name="init" description="Initializes build script">
		<mkdir dir="${build.dir}"/>
    	<mkdir dir="${build.classes}"/>
    	<mkdir dir="${build.webapp}"/>
		<mkdir dir="${build.test.dir}"/>
		<mkdir dir="${build.test.classes.dir}"/>
    	<mkdir dir="${test.reports.dir}"/>
    	
        <path id="compile.classpath">
			<fileset dir="${lib}">
				<include name="*.jar"/>
				<include name="build/*.jar"/>
			</fileset>
		</path>

<!--    	<path id="compile.test.classpath">
    		<path refid="compile.classpath"/>
			<path location="${build.classes}"/>
    	</path>-->

    	<path id="compile.test.classpath">
    		<path refid="compile.classpath"/>
			<pathelement location="${build.classes}"/>
			<pathelement location="${build.test.classes.dir}"/>
			<pathelement location="${build.test.conf.dir}"/>
    	</path>

    	<path id="hibernatetoolslib">
    		<path refid="compile.classpath"/>
    		<fileset dir="${hibernatetools.dir}">
    			<include name="*.jar"/>
    		</fileset>
    		<path location="${build.classes}"/>
    	</path>
    	   
    	<taskdef name="hibernatetool"
    	         classname="org.hibernate.tool.ant.HibernateToolTask" 
    	         classpathref="hibernatetoolslib"/>
    	
    	<taskdef name="dbunit" 
    	    		classname="org.dbunit.ant.DbUnitTask"
    	    		classpathref="compile.classpath"/>
    	
        <path id="emma.classpath">			
        	<fileset dir="${lib}">
				<include name="build/emma.jar"/>
				<include name="build/emma_ant.jar"/>
			</fileset>
		</path>    	
    	
        <path id="instr.classpath">
        	<pathelement location="${build.classes}"/>
		</path>    	    	
		
		<taskdef resource="emma_ant.properties" 
    			 classpathref="emma.classpath" />
    	
    </target>
	
	<!-- instruments all the classes, runs the tests, and generates reports -->
	<target name="emma" depends="make-jar, compile-tests" description="Compiles source files">
    	<property name="emma.enabled" value="true" />
			
		<!-- instrument the jar file and the test classess -->
		<!-- note: for some reason, doesn't instrument the test classes -->
		<emma enabled="${emma.enabled}">
	        <instr instrpathref="instr.classpath" 
	        	   mode="overwrite" 
	        	   metadatafile="${coverage.dir}/emma-agilefant.emma"
  	        	   destdir=".">
	        </instr>
		</emma>
		
		<!-- run the tests to produce coverage data -->
		<antcall target="test-all"/>
				
		<!-- produce reports out of the collected data -->
	    <emma enabled="${emma.enabled}" >
	      <report sourcepath="${src}" >
	        <fileset dir="${coverage.dir}" >
	          <include name="*.emma" />
	        </fileset>

	        <txt outfile="${coverage.dir}/coverage.txt" />
	        <html outfile="${coverage.dir}/coverage.html" />
	      </report>
	    </emma>		
	</target>
	
    <target name="compile" depends="init" description="Compiles source files">
		<javac debug="${javac.debug}" destdir="${build.classes}" srcdir="${src}">
        	<classpath refid="compile.classpath"/>
        	<!-- <compilerarg value="-Xlint:deprecation"/> -->
		</javac>
    </target>
	
	<target name="make-jar" depends="compile" description="Makes the jar file">
		<jar basedir="${build.classes}" includes="**" destfile="${jarFile}"/>	
	</target>
	
	<target name="create-db" depends="compile" description="Creates db using hibernate tools">
		<hibernatetool destdir="${build.dir}">
			<annotationconfiguration propertyfile="${conf.dir}/database-${database.type}.properties"
				configurationfile="${conf.dir}/hibernate.cfg.xml"/>
			<hbm2ddl export="${hbm2ddl.export}" outputfilename="create-db.ddl"/>
		</hibernatetool>
	</target>

	<target name="create-test-db" depends="compile" description="Creates db using hibernate tools">
		<hibernatetool destdir="${build.dir}">
			<annotationconfiguration propertyfile="${conf.dir}/database-fortests-${database.type}.properties"
				configurationfile="${conf.dir}/hibernate.cfg.xml"/>
			<hbm2ddl export="${hbm2ddl.export}" outputfilename="create-db.ddl"/>
		</hibernatetool>
	</target>

	<target name="test-reports" description="Generate HTML reports from XML test results">
		<junitreport todir="${test.reports.dir}">
			<fileset dir="${test.reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${test.reports.dir}"/>
		</junitreport>
	</target>
	
	<!-- depends compile-tests, jotta tulee yhdellä ant-targetilla kuntoon -->
	<target name="test-prepare-spring" depends="compile-tests" description="Prepare Spring-specific stuff for tests">
		<copy todir="${build.test.conf.dir}/WEB-INF/"> <!-- tarvitaanko enää?-->
	    	<fileset dir="${conf.dir}" excludes="database-*.properties"/>
		</copy>
		<copy todir="${build.test.conf.dir}">
	    	<fileset dir="${conf.dir}" excludes="database-*.properties"/>
		</copy>
		<copy tofile="${build.test.conf.dir}/WEB-INF/database.properties">
			<!-- old: 			<fileset file="${conf.dir}/database-${database.type}.properties"/> -->
			<fileset file="${conf.dir}/database-fortests-${database.type}.properties"/>
		</copy>
	</target>
	
	<target name="test">
		<mkdir dir="${build.test.conf.dir}/WEB-INF"/>
		<mkdir dir="${test.reports.dir}"/>
<!--		<junit fork="true" dir="${build.test.conf.dir}"> -->
		<junit fork="true" dir="${build.test.dir}" printsummary="true">
			
	        <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
	        <jvmarg value="-Demma.coverage.out.merge=true" />
			
			<!-- System property for recognizing ant instead of eclipse-->
			<classpath refid="compile.test.classpath"/>
			<formatter type="xml"/>
			<batchtest todir="${test.reports.dir}">
				<fileset dir="${srcdir}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="test-unit" depends="compile-tests" description="Runs unit tests">
		<antcall target="test">
			<param name="srcdir" value="${test.unit.src}"/>
		</antcall>
	</target>
	
	<target name="test-integration" depends="compile-tests, test-prepare-spring" description="Runs integration tests">
		<antcall target="test">
			<param name="srcdir" value="${test.integration.src}"/>
		</antcall>
	</target>
	
	<target name="test-all" depends="test-unit, test-integration" description="Run all tests and generate HTML reports"/>
	
	<!-- ei tarvinne webappia -->
	<target name="compile-tests" depends="compile">
		<mkdir dir="${build.test.classes.dir}"/>
		<javac debug="${javac.debug}" destdir="${build.test.classes.dir}" srcdir="${test.util.src}">
        	<classpath refid="compile.test.classpath"/>
		</javac>
		<javac debug="${javac.debug}" destdir="${build.test.classes.dir}" srcdir="${test.unit.src}">
        	<classpath refid="compile.test.classpath"/>
		</javac>
		<javac debug="${javac.debug}" destdir="${build.test.classes.dir}" srcdir="${test.fixture.src}">
        	<classpath refid="compile.test.classpath"/>
		</javac>
		<javac debug="${javac.debug}" destdir="${build.test.classes.dir}" srcdir="${test.integration.src}">
        	<classpath refid="compile.test.classpath"/>
		</javac>
	</target>
	
	<target name="drop-create-db" depends="compile" description="Creates db using hibernate tools">
		<hibernatetool destdir="${build.dir}">
			<annotationconfiguration propertyfile="${conf.dir}/database-${database.type}.properties"
				configurationfile="${conf.dir}/hibernate.cfg.xml"/>
			<hbm2ddl drop="true" export="${hbm2ddl.export}" outputfilename="create-db.ddl"/>
		</hibernatetool>
	</target>

	<target name="drop-create-test-db" depends="compile" description="Creates db using hibernate tools">
		<hibernatetool destdir="${build.dir}">
			<annotationconfiguration propertyfile="${conf.dir}/database-fortests-${database.type}.properties"
				configurationfile="${conf.dir}/hibernate.cfg.xml"/>
			<hbm2ddl drop="true" export="${hbm2ddl.export}" outputfilename="create-db.ddl"/>
		</hibernatetool>
	</target>

	<target name="update-db" depends="compile" description="Creates db using hibernate tools">
		<hibernatetool destdir="${build.dir}">
			<annotationconfiguration propertyfile="${conf.dir}/database-${database.type}.properties"
				configurationfile="${conf.dir}/hibernate.cfg.xml"/>
			<hbm2ddl export="${hbm2ddl.export}" outputfilename="create-db.ddl" update="true"/>
		</hibernatetool>
	</target>
	
		
	<target name="webapp" depends="make-jar" description="Builds webapp">
        <copy includeEmptyDirs="true" todir="${build.webapp}">
            <fileset dir="${webapp.root}"/>
        </copy>
		<copy todir="${build.webapp}/WEB-INF/">
	    	<fileset dir="${conf.dir}" excludes="database-*.properties"/>
		</copy>
		<copy tofile="${build.webapp}/WEB-INF/database.properties">
			<fileset file="${conf.dir}/database-${database.type}.properties"/>
		</copy>
        <copy todir="${build.webapp}/WEB-INF/lib/">
            <fileset dir="${lib}">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
		<copy todir="${build.webapp}/WEB-INF/lib/">
			<fileset file="${jarFile}"/>
		</copy>
	</target>
	
	<target name="quick-ui-deploy" depends="init" description="Quickly deploys all jsp to server">
		<copy todir="${deploy.dir.local}/WEB-INF/jsp/">
			<fileset dir="${webapp.root}/WEB-INF/jsp/"/>
		</copy>	
	</target>
	
	<target name="deploy-local" depends="webapp" description="Deploys web app to local server">
		<mkdir dir="${deploy.dir.local}"/>
		<copy todir="${deploy.dir.local}">
			<fileset dir="${build.webapp}"/>			
		</copy>
		<touch file="${deploy.dir.local}/WEB-INF/web.xml"/>
	</target>
	
	<target name="undeploy-local" description="Undeploys web app on local server">
		<delete dir="${deploy.dir.local}"/>
		<delete dir="${catalina.home}/work/Catalina/localhost/${webapp.name}"/>
	</target>
	
	<target name="clean" description="Removes build directory">
        <delete dir="${build.dir}"/>
    	<delete dir="${test.reports.dir}"/>		
	</target>
	
	<target name="set-original-db" depends="init" description="Updates the database, with default values from the XML file">
		<dbunit driver="${hibernate.connection.driver_class}"         
			url="${hibernate.connection.url}"          
			userid="${hibernate.connection.username}"          
			password="${hibernate.connection.password}">
		    <classpath refid="compile.classpath"/>    	
		    <operation type="CLEAN_INSERT" src="${testdata.dir}/testData.xml" format="xml"/>
		</dbunit>
	</target>
	
	<target name="export-db" depends="init" description="Exports the database into an XML file">
		<dbunit driver="${hibernate.connection.driver_class}"         
					url="${hibernate.connection.url}"
					userid="${hibernate.connection.username}"          
					password="${hibernate.connection.password}">    
		    <export dest="${build.test}/exportedData.xml" format="xml"/>
		</dbunit>
	</target>
	
	<target name="count-loc">
		<exec executable="/bin/sh">
			<arg value="${basedir}/tools/count-loc.sh"/>
		</exec>
	</target>
	
	<target name="generate-javadocs" depends="init" description="Generates Javadocs from source code">
		<!-- TODO: Generate docs for taglibs -->
		<mkdir dir="${javadoc.dir}"/>
		<javadoc classpathref="compile.classpath" destdir="${javadoc.dir}" access="private">			
			<fileset dir="${src}" defaultexcludes="yes">
			      <include name="**"/>
			</fileset>
			<doctitle>AgilEFant 2007 Javadoc</doctitle>
		</javadoc>
	</target>
	
	<target name="run-jdepend" depends="compile" description="Runs JDepend">
		<mkdir dir="${jdepend.dir}"/>

		<jdepend format="xml" outputfile="${jdepend.dir}/jdepend-report.xml">
			<classespath>
				<pathelement location="${build.classes}" />
			</classespath>
		</jdepend>
		<style basedir="${jdepend.dir}" destdir="${jdepend.dir}"
			includes="jdepend-report.xml" 
			style="${ant.home}/etc/jdepend.xsl" />		
	</target>
	
	<target name="war" depends="webapp">
		<jar basedir="${build.webapp}" includes="**" destfile="${warFile}"/>	
	</target>
	
	<target name="release" depends="clean, war, generate-javadocs, run-jdepend">
		<mkdir dir="${release.dir}"/>
		<mkdir dir="${release.dir}/doc"/>
		<copy file="${warFile}" todir="${release.dir}"/>
		<copy todir="${release.dir}/doc">
	    	<fileset dir="${doc.dir}"/>
		</copy>
	</target>
</project>
