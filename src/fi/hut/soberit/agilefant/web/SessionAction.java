package fi.hut.soberit.agilefant.web;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import com.opensymphony.xwork.ActionContext;
import com.opensymphony.xwork.ActionSupport;

/**
 * The action class for populating the lefthand menu.
 * 
 * @author rjokelai
 */
public class SessionAction extends ActionSupport {
    private static final long serialVersionUID = -137364974320138538L;
    
    private String contextType = "";
    private Integer objectId;
    private Integer tabId = 0;
    //Pasi: use special session context to avoid overwrites
    public final static String CONTEXT_KEY = "ajaxContext";
    
    /**
     * Open a dialog by ajax request.
     * @return
     */
    @SuppressWarnings("unchecked")
    public String ajaxOpenDialog() {
        //Collection<Integer[]> openDialogs = null;
        Map<Integer,Integer> openDialogs = null;
        Map<String,Map> ajaxContext;
        
        /* Get the data from session */
        try {
            ajaxContext = (Map<String,Map>)ActionContext.getContext().getSession().get(CONTEXT_KEY);
            if(ajaxContext == null) {
                ajaxContext = new HashMap<String,Map>();
            } else {
                openDialogs = ajaxContext.get(contextType);
            }
        }
        catch (Exception e) {
            System.out.println("PROBBBBBB!!!");
            return CRUDAction.AJAX_ERROR;
        }
        
        /* Create, if doesn't exist */
        if (openDialogs == null) {
            openDialogs = new HashMap<Integer, Integer>();
        }
        openDialogs.put(objectId, tabId);
        ajaxContext.put(contextType, openDialogs);
        ActionContext.getContext().getSession().put(CONTEXT_KEY,ajaxContext);
        
        return CRUDAction.AJAX_SUCCESS;
    }
    
    /**
     * Close a dialog by ajax request.
     * @return
     */
    @SuppressWarnings("unchecked")
    public String ajaxCloseDialog() {
        Map<Integer, Integer> openDialogs = null;
        Map<String,Map> ajaxContext;
        
        /* Get the data from session */
        try {
            ajaxContext = (Map<String,Map>)ActionContext.getContext().getSession().get(CONTEXT_KEY);
            if(ajaxContext == null) {
                ajaxContext = new HashMap<String,Map>();
            } else {
                openDialogs = ajaxContext.get(contextType);
            }
        }
        catch (Exception e) {
            return CRUDAction.AJAX_ERROR;
        }
   
        /* Create, if doesn't exist */
        if (openDialogs == null) {
            return CRUDAction.AJAX_SUCCESS;
        }
        
        openDialogs.remove(objectId);
        
        ajaxContext.put(contextType, openDialogs);
        ActionContext.getContext().getSession().put(CONTEXT_KEY,ajaxContext);

        
        return CRUDAction.AJAX_SUCCESS;
    }

    /*
     * Autogenerated list of getters and setters
     */
    
    public String getContextType() {
        return contextType;
    }

    public void setContextType(String contextType) {
        this.contextType = contextType;
    }

    public Integer getObjectId() {
        return objectId;
    }

    public void setObjectId(Integer objectId) {
        this.objectId = objectId;
    }

    public void setTabId(Integer tabId) {
        this.tabId = tabId;
    }
    
}
